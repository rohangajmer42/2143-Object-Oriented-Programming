Extracted Questions:
\question[3]Which of the following functions demonstrates function overloading in the code snippet?
\question[3]Which of the following functions demonstrates function overriding in the code snippet?
\question[3]How can we make a class abstract?
\question[3]Which of the following is true about the friend keyword in C++?
\question[3] Which of the following is a potential drawback of using the friend keyword?
\question[3]Which of the following keywords is used to control access to a class member?
\question[3]Like private members, protected members are inaccessible outside of the class. However, they can be accessed by?
\question[3]What is the purpose of an \ccb{abstract class} in C++?
\question[3]Given a \ccb{class Widget}, which of the following choices could access \textit{private data members} or \textit{private member functions} of Widget.
\question[3]Which of the following type of data member can be shared by \textit{all instances} of its class?
\question[4] An object is a(n) \fillin of a class that resides in \fillin and has \fillin.
\question[3]A \textit{constructor} is executed when {\noindent\rule{1cm}{.5pt}}?
\question[3]How many objects can be created from an abstract class?
\question[3]What does the class definitions in the following code represent?
\question[3]Which of the following can be overloaded?
\question[3]Which of the following means "\textit{The use of an object of one class in the definition of another class}"?
\question[3]In the code snippet below, we have an example of:
\question[3]In the snippet below, if I wanted to make \ccb{Character} an abstract class, I would have to:
\question[3]A class that has all of its methods implemented, and can be instantiated is know as a(n):
\question[3]\ccb{Runtime Polymorphism} requires?
\question[3]We typically choose \ccb{Inheritance} over \ccb{Composition}?
\question[3]When a derived class inherits from more than one base-class directly, we call this?
\question[5] The concept of determining which methods to invoke while a program is executing is known as:\\
\question[5] The concept of determining which methods to invoke before a program is executing is known as:
\question[5] Write a single C++ statement that dynamically allocates a single int and initializes it to 7.
\question[10] Rewrite the snippet below so that the Kid can access his dad private stash of alcohol. The alcohol attribute must stay private.
\question[10] Finish the Character class so that the print method in Character must be implemented in both sub-classes.
\question[10] Add necessary code to snippet below, to ensure it works without error. You cannot change any code, you must add additional code. Simplest answer gets the most points.
\question[2]Write a single C++ statement that dynamically allocates a single int and initializes it to 99.
\question[2]Class \ccb{Wizard} is {\noindent\rule{1cm}{.5pt}}  the print method in \ccb{Character}
\question[2]The \ccb{Print} method is {\noindent\rule{1cm}{.5pt}} in class  \ccb{Character}
\question[2]How can we make a class abstract?
\question[2]Which of the following statement is correct with respect to the use of \ccb{friend} keyword inside a class?
\question[2]Which of the following keywords is used to control access to a class member?
\question[2]Like private members, protected members are inaccessible outside of the class. However, they can be accessed by?
\question[2]Which of the following can access \textit{private data members} or \textit{private member functions} of a class?
\question[2]Which of the following type of data member can be shared by \textit{all instances} of its class?
\question[2]Which of the following is also known as an instance of a class?
\question[2]A \textit{constructor} is executed when {\noindent\rule{1cm}{.5pt}}?
\question[2]How many objects can be created from an abstract class?
\question[2]What does the class definitions in the following code represent?
\question[2]Which of the following can be overloaded?
\question[2]Which of the following means "\textit{The use of an object of one class in the definition of another class}"?
\question[2]Which of the following is the only technical difference between structures and classes in C++?
\question[2]Which of the following concepts means "determine at runtime" what method to invoke?
\question[2]In the code snippet below, we have an example of:
\question[2]In the snippet below, if I wanted to make \ccb{Character} an abstract class, I would have to:
\question[2]Which of the following can be an \ccb{object}:
\question[2]What is the one thing that is necessary for \ccb{run time polymorphism}?
\question[2]We typically choose \ccb{Inheritance} over \ccb{Composition}?
\question[2]When a derived class inherits from more than one superclass directly, we call it?
\question[15] Rewrite the snippet below so that the Kid can access his dad private stash of alcohol. The alcohol attribute must stay private.
\question[15] Rewrite the necessary component of the code snippet below, so that the print method in Character must be implemented in both sub-classes.

Extracted Code Blocks:
```c++\begin{minted}[]{c++}
class Base {
public:
void Attack() {
std::cout << "Base attack!" << std::endl;
}
void Attack(int damage) {
std::cout << "Base attack for " << damage << " damage!" << std::endl;
}
virtual void SpecialAttack() {
std::cout << "Base special attack!" << std::endl;
}
};

class Derived : public Base {
public:
void Attack() {
std::cout << "Derived attack!" << std::endl;
}
void SpecialAttack() {
std::cout << "Derived special attack!" << std::endl;
}
};

\end{minted}```

```c++% \begin{minted}[]{c++}
% class Character {
% protected:
%     string name;
% public:
%     void print() {
%         cout << name << endl;
%     }
%     void print(string x) {
%         cout << name << X<< endl;
%     }
% };

% class Wizard : public Character {
% public:
%     void print() {
%         cout << name << " is a Wizard!" << endl;
%     }
% };
% \end{minted}```

```c++\begin{minted}[]{c++}
class Character
{
string name;
};
class Wizard: public Character
{
int spellStrength;
};
\end{minted}```

```c++\begin{minted}[]{c++}
class Base {
public:
void print() {cout << "Base Function" << endl;}
};

class Derived : public Base {
public:
void print() {}cout << "Derived Function" << endl;}
};
int main() {
Derived derived1;
derived1.print();
}
\end{minted}```

```c++\begin{minted}[]{c++}
class Character {
protected:
string name;
public:
void print() {
cout << name << endl;
}
};

class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}
int *ptr = new int(7);
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}
class Dad {
private:
string alcohol;

protected:
public:
};

class Kid {

protected:
public:
Kid() {
}

};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}

class Kid; // Forward declaration

class Dad {
private:
string alcohol;

protected:
public:
friend Kid; // Make Kid a friend
};

class Kid {

protected:
public:
Kid() {
}

};
\end{minted}```

```c++\begin{minted}[]{c++}
class Character {
string name;
};

class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
class Warrior : public Character {
public:
void print() {
cout << name << " is a warrior!" << endl;
}
};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}
class Character {
protected:
string name;
public:
virtual void print() = 0;
};
class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
class Warrior : public Character {
public:
void print() {
cout << name << " is a Warrior!" << endl;
}
};
// optionally
int main{
Character *ptr;
Wizard wi;
Warrior wa;
ptr = &wi;
ptr->print(); // will correctly choose print method from Wizard
ptr = &wa;
ptr->print(); // will correctly choose print method from Warrior
return 0;
}
\end{minted}```

```c++\begin{minted}[]{c++}
class Wizard {
private:
int mana_;
public:

};

class Rogue {
public:
void StealMana(Wizard& wizard) {
wizard.mana_ -= 10;
}
};
\end{minted}```

```c++\begin{minted}[]{c++}
#include <iostream>

// Tell compiler Rogue is a class so the Wizard class
// wont error when it tries to friend it.
class Rogue;

class Wizard {
private:
int mana_;

public:
// Make Rogue a friend, so it has access to your privates
// and can steal yousr manna.
friend Rogue;   // <-------------
};

class Rogue {
public:
void StealMana(Wizard &wizard) { wizard.mana_ -= 10; }
};

int main() {
Rogue R;
Wizard W;
R.StealMana(W);
}
\end{minted}```

```c++\begin{minted}[]{c++}
class Character {
protected:
string name;
public:
void print() {
cout << name << endl;
}
void print(string x) {
cout << name << X<< endl;
}
};

class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
\end{minted}```

```c++\begin{minted}[]{c++}
class Character
{
string name;
};
class Wizard: public Character
{
int spellStrength;
};
\end{minted}```

```c++\begin{minted}[]{c++}
class Base {
public:
void print() {cout << "Base Function" << endl;}
};

class Derived : public Base {
public:
void print() {}cout << "Derived Function" << endl;}
};
int main() {
Derived derived1;
derived1.print();
}
\end{minted}```

```c++\begin{minted}[]{c++}
class Character {
protected:
string name;
public:
void print() {
cout << name << endl;
}
};

class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}
class Dad {
private:
string alcohol;

protected:
public:
};

class Kid {

protected:
public:
Kid() {
}

};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}

class Kid; // Forward declaration

class Dad {
private:
string alcohol;

protected:
public:
friend Kid; // Make Kid a friend
};

class Kid {

protected:
public:
Kid() {
}

};
\end{minted}```

```c++\begin{minted}[]{c++}
class Character {
protected:
int name;
public:
void print() {
cout << name << endl;
}
};
class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
class Warrior : public Character {
public:
void print() {
cout << name << " is a warrior!" << endl;
}
};
\end{minted}```

```c++\begin{minted}[linenos=false]{c++}
class Character {
protected:
int name;
public:
virtual void print() = 0;
};
class Wizard : public Character {
public:
void print() {
cout << name << " is a Wizard!" << endl;
}
};
class Warrior : public Character {
public:
void print() {
cout << name << " is a Warrior!" << endl;
}
};
// optionally
int main{
Character *ptr;
Wizard wi;
Warrior wa;
ptr = &wi;
ptr->print(); // will correctly choose print method from Wizard
ptr = &wa;
ptr->print(); // will correctly choose print method from Warrior
return 0;
}
\end{minted}```

